#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2014, Asociacion Clubs Baloncesto (acb.com)                      #
# Author: Joaquin Villanueva                                                 #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# MV <hostA:system_ds/disk.i|hostB:system_ds/disk.i> vmid dsid
#    <hostA:system_ds/|hostB:system_ds/>
#   - hostX is the target host to deploy the VM
#   - system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2

VMID=$3
DSID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

TM_PATH=$(dirname $0)
source ${TM_PATH}/../../datastore/eqliscsi/eqliscsi.conf
source ${TM_PATH}/../../scripts_eqliscsi.sh

#-------------------------------------------------------------------------------
# Return if moving a disk, we will move them when moving the whole system_ds
# directory for the VM
#-------------------------------------------------------------------------------

SRC_PATH=`arg_path $SRC`
DST_PATH=`arg_path $DST`

SRC_HOST=`arg_host $SRC`
DST_HOST=`arg_host $DST`

DST_DIR=`dirname $DST_PATH`

if [ `is_disk $SRC_PATH` -eq 0 ]; then
    eql_ssh_make_path $DST_HOST $DST_DIR "exit"

    log "Moving $SRC to $DST"

    eql_exec_and_log "$SCP -r $SRC $DST" "Could not copy $SRC to $DST" "exit"

    eql_ssh_exec_and_log "$SRC_HOST" "rm -rf $SRC_PATH" \
        "Could not remove $SRC_HOST:$SRC_PATH"
	"exit"

    exit 0
fi

if [ "$SRC" == "$DST" ]; then
    log "Not moving $SRC to $DST, they are the same path"
	exit 0
fi

#-------------------------------------------------------------------------------
# Get image information
#-------------------------------------------------------------------------------

XPATH="${TM_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS

DISK_ID=$(echo "$SRC_PATH" | $AWK -F. '{print $NF}')

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT)

SRC="${XPATH_ELEMENTS[0]}"
PERSISTENT="${XPATH_ELEMENTS[1]}"

if [ -z "$PERSISTENT" ]; then
    SRC=$SRC-$VMID
fi

EQL_HOST="$(eql_src_get_host $SRC)"
IQN="$(eql_src_get_iqn $SRC)"
EQL_VOLUME="$(eql_src_get_volume $SRC)"
EQL_DEV="$EQL_BASE_DEVICE/$EQL_VOLUME"

#-------------------------------------------------------------------------------
# Logout from SRC_HOST
#-------------------------------------------------------------------------------

if is_iscsi "$SRC_HOST"; then
    log "Logging out of $SRC_PATH in $SRC_HOST"

    LOGOUT_CMD=$(cat <<EOF
    set -e
    $SUDO $(eqliscsi_logout "$IQN")
EOF
)

    eql_ssh_exec_and_log "$SRC_HOST" "$LOGOUT_CMD" \
        "Error logging out $SRC_HOST:$SRC_PATH" \
	"exit"
fi

#-------------------------------------------------------------------------------
# Login to DST_HOST
#-------------------------------------------------------------------------------
if is_iscsi "$DST_HOST"; then
    log "Logging in to $IQN in $DST_HOST"

    LOGIN_CMD=$(cat <<EOF
	set -e
	mkdir -p $DST_DIR
	$SUDO $(eqliscsi_discovery)
	$SUDO $(eqliscsi_login "$IQN")
        ERROR=\$?
	if [ "\$ERROR" -ne 0 ]; then
    	    exit \$ERROR
	fi
	# poll
	while [ ! -L "$EQL_DEV" ]; do
	    sleep 1
	done
	ln -sf "$EQL_DEV" "$DST_PATH"
EOF
)

    eql_ssh_exec_and_log "$DST_HOST" "$LOGIN_CMD" \
        "Error logging in $EQL_HOST:$IQN" \
	"exit"
fi

exit 0
